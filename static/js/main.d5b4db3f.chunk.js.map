{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Cards.jsx","components/Feeds.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","class","href","target","Cards","state","username","handleChange","bind","e","name","value","this","setState","type","id","placeholder","autoComplete","onChange","dataSource","sourceType","screenName","options","height","React","Component","Feeds","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAYeA,MATf,WACI,OACI,yBAAKC,UAAU,UACX,kDACA,wECKGC,MATf,WACI,OACI,yBAAKC,MAAM,UACP,6DACA,uBAAGC,KAAK,iCAAiCC,OAAO,UAAhD,0B,mDCwCGC,E,kDA1CX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,SAAU,IAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALV,E,yDAODC,GAAI,IAAD,EACUA,EAAEN,OAAjBO,EADK,EACLA,KAAMC,EADD,EACCA,MAEbC,KAAKC,SAAL,eACKH,EAAOC,M,+BAIZ,OACI,yBAAKZ,UAAU,UACX,yBAAKA,UAAU,QACf,2BACIe,KAAK,OACLJ,KAAK,WACLK,GAAG,WACHC,YAAY,yBACZC,aAAa,MACbN,MAAOC,KAAKP,MAAMC,SAClBY,SAAUN,KAAKL,eAEnB,kBAAC,IAAD,CACEY,WAAY,CACVC,WAAY,UACZC,WAAYT,KAAKP,MAAMC,UAEzBgB,QAAS,CACPC,OAAQ,e,GAlCRC,IAAMC,WCaXC,E,uKAXP,OACI,yBAAK3B,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPIyB,IAAMC,WCYXE,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5b4db3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return(\r\n        <div className=\"Header\">\r\n            <h1>Multi Twitter Feed</h1>\r\n            <p>Multiple Twitter feeds, viewed at once.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n    return(\r\n        <div class=\"Footer\">\r\n            <h1>Made in React.js and Pure CSS</h1>\r\n            <a href=\"https://realtechnerd.github.io\" target=\"_blank\">by Nithil Krishnaraj</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport \"./style.css\";\r\nimport { Timeline } from 'react-twitter-widgets';\r\n\r\nclass Cards extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            username: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        const {name, value} = e.target;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"column\">\r\n                <div className=\"card\">\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"username\" \r\n                    id=\"username\"\r\n                    placeholder=\"Enter Twitter Username\"\r\n                    autoComplete=\"off\"\r\n                    value={this.state.username}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <Timeline\r\n                  dataSource={{\r\n                    sourceType: 'profile',\r\n                    screenName: this.state.username\r\n                  }}\r\n                  options={{\r\n                    height: '750'\r\n                  }}\r\n                />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport Cards from \"./Cards.jsx\";\r\nimport \"./style.css\";\r\n\r\nclass Feeds extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"row\">\r\n                <Cards/>\r\n                <Cards/>\r\n                <Cards/>\r\n                <Cards/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Feeds;","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header.jsx\";\r\nimport Footer from \"./components/Footer.jsx\";\r\nimport Feeds from \"./components/Feeds.jsx\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header/>\r\n      <Feeds/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}